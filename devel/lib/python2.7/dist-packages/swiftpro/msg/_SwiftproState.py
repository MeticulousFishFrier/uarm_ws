# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swiftpro/SwiftproState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SwiftproState(genpy.Message):
  _md5sum = "9ba8509bd2b2c039f3239b4017aa5a8a"
  _type = "swiftpro/SwiftproState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 motor_angle1
float64 motor_angle2
float64 motor_angle3
float64 motor_angle4
float64 x
float64 y
float64 z
uint8 	pump
uint8 	swiftpro_status
uint8 	gripper
bool    busy"""
  __slots__ = ['motor_angle1','motor_angle2','motor_angle3','motor_angle4','x','y','z','pump','swiftpro_status','gripper','busy']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','uint8','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_angle1,motor_angle2,motor_angle3,motor_angle4,x,y,z,pump,swiftpro_status,gripper,busy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwiftproState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor_angle1 is None:
        self.motor_angle1 = 0.
      if self.motor_angle2 is None:
        self.motor_angle2 = 0.
      if self.motor_angle3 is None:
        self.motor_angle3 = 0.
      if self.motor_angle4 is None:
        self.motor_angle4 = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.pump is None:
        self.pump = 0
      if self.swiftpro_status is None:
        self.swiftpro_status = 0
      if self.gripper is None:
        self.gripper = 0
      if self.busy is None:
        self.busy = False
    else:
      self.motor_angle1 = 0.
      self.motor_angle2 = 0.
      self.motor_angle3 = 0.
      self.motor_angle4 = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.pump = 0
      self.swiftpro_status = 0
      self.gripper = 0
      self.busy = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.motor_angle1, _x.motor_angle2, _x.motor_angle3, _x.motor_angle4, _x.x, _x.y, _x.z, _x.pump, _x.swiftpro_status, _x.gripper, _x.busy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.motor_angle1, _x.motor_angle2, _x.motor_angle3, _x.motor_angle4, _x.x, _x.y, _x.z, _x.pump, _x.swiftpro_status, _x.gripper, _x.busy,) = _get_struct_7d4B().unpack(str[start:end])
      self.busy = bool(self.busy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.motor_angle1, _x.motor_angle2, _x.motor_angle3, _x.motor_angle4, _x.x, _x.y, _x.z, _x.pump, _x.swiftpro_status, _x.gripper, _x.busy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.motor_angle1, _x.motor_angle2, _x.motor_angle3, _x.motor_angle4, _x.x, _x.y, _x.z, _x.pump, _x.swiftpro_status, _x.gripper, _x.busy,) = _get_struct_7d4B().unpack(str[start:end])
      self.busy = bool(self.busy)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d4B = None
def _get_struct_7d4B():
    global _struct_7d4B
    if _struct_7d4B is None:
        _struct_7d4B = struct.Struct("<7d4B")
    return _struct_7d4B
